services:
  kafka:
    image: bitnami/kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      # optional - enable topic auto create
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    networks:
      - app-network


  zookeeper:
    image: bitnami/zookeeper:3.9.1
    tmpfs: "/zktmp"
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    ports:
      - "2181:2181"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - app-network


  django:
    build: .
    volumes:
      - ./apps:/app/apps
      - ./config:/app/config
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings
    env_file:
      - .env
    depends_on:
      - kafka
      - elasticsearch
    ports:
      - "8000:8000"

#  kafka-consumer:
#    build:
#      context: ./kafka/consumer
#    container_name: kafka-consumer
#    depends_on:
#      - kafka
#      - elasticsearch
#    command: python consumer.py
#    networks:
#      - app-network
#
#  kafka-producer:
#      build:
#        context: ./kafka/producer
#      container_name: kafka-producer
#      depends_on:
#        - kafka
#      command: python producer.py
#